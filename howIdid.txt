1. used postcss, react, tailwindcss 

2. made login page first

3. In api folder we have index file in which we used express, mongoose, dotenv (to store variables) 

4. we also have models folder inside API folder as they are MODELS for our api for mongoose models and there we have model for our USER.

5. IN USER MODEL FIRST WE NEED TO DEFINE THE SCHEMA OF OUR USER in which we define what data type of our variable should be like  ( username:String, password: String, DOB: date ) 

6. MODEL looks like = export const UserModel = mongoose.model("User", UserSchema);

7.Then we imported that model in the index.js file and used it in 'register' url to get name and password from user and create a new user in the database USING ( req.body ) 

8.User.create({username,password}) and this is a async function so we used async and await with this.

9. Then after creating the user we want to login that user immediately using JWT TOKEN for authentication (npm i jsonwebtoken) 

-->jwt.sign('paylauch which is the info we want to have inside out token','SECRET KEY')
		
		
		User.create({},{})  ,  _id is for mongoose
		
----> jwt.sign({userID:createdUserID._id}, jwtSecret) // this is also a async function so we can use async&await or .then to deal with promises

10. IF this jwt.sign() throws no error then we grab the token which is provided by this and sent it as a COOKIE

11. Then we go to Register.jsx and try to send a request to our API using FETCH or AXIOS using the form submit button for that we have a register function.

12. But before this we did set 

' axios.defaults.baseURL : "localhost:8000" ' and 
' axios.defaults.withCredentials = true ' - so we can set cookies from our API

13. As of now we got the user and user is now logged in inside API.

14. Now we will handle login function inside our react app

15. Now we created a context inside our react app and context for our app that will hold the information about the currently logged in user

16. UserContext.js file is made in the execution of the 15th point.

17. UserContext.js file stores the information about the user.

18. Then we used UserContext inside the REGISTER FILE and initialized the username and userid to the setusername and setId variable of userContext

19. Then wrapped register inside the APP.JSX with UserContextProvider  

20. Then we made Routes.jsx because we provided UserContextProvider only to the Register and not outside, thus we put Register under the routes file and wrapped ROUTES instead of REGISTER in the APP.JSX file

21. AS OF NOW WE CAN SEE THAT AFTER CLICKING ON REGISTER BUTTON WE SEE THE MESSAGE LOGGED IN, BUT also as we refresh we are not logged in anymore.

22. TO check if we are logged in we need to send the token to the api

23. WE get the user data from the token we are sending

24. Now as we got the user when we refresh the page we dont see the login/signup page because we now see the chat page

25. Now we are made Chat.jsx and did styling

26. Now We have a column of contacts to show people who are online NOW IS THE TIME TO INSTALL WEBSOCKETS

27. We create a websocket server in the API INDEX.Js
 - app.listen return a server and we used this server to make a websocket server 
 - we use this server variable to define a another server for websokets
 - new ws.websocketserver({server}) // returns a web soket server
 
28. Connected web socket server inside the chat.jsx file using 'WebSocket('URL')'
 
29. we receive the websocket from the 28th point and now we can add things that should happen when we are logged in 

30. To send a msg to the page we need to check first that who is online for that we use cookies which we sent previously to store the userid

31. as now we got user data ( commented inside the index.js file )

32. we now need to put this data into the connection ( web socket connection to the client ) 

33. Now we send this info back to our react app to show the data

34. as of now we made a user avatar and made a function to show no msg selected and reverse

35. Now we need to send a msg	

36. we made a state for a newmsg and fix the send button by using the OnSubmit property on button and the form and sending the data using onSubmit property of the form and invoking the function

37. when we are sending the message we want to grab our webserver using ws.send

38. we hide the form when no person is selected 

39. Now when connection is formed between 2 users we take the message and the recipitent from the message data in INDEX.js from sender

40. Now we need to send this message to the receiver

41. we sent message from one user to another using function handleMsg inside the chat.jsx


42. Now we need to display the message using setmessages state in chat.jsx 

43. till now we just see the msg we send from our side 

44. to see the incoming messages  we need to check who is the sender and how we know this is in index.js "connection.on" line and Handling it in the chat.jsx file in "handlemsg function"

45. Now we get the text and the sender now, we have to send it to the database also and for that we need to make a model (which have schema of message) first in the api folder (model named Message.js)

46. As we are sending our msg in the index.js file in the function "connection.on"
we need to send the msg to the database also so we define a function inside this "connection.on"

47. Now we are getting our message and it is showing in the frontend also.

48.We have dupes to remove them we installed lodash function for unique messages
  const messagesWithoutDupes =  uniqBy( messages, 'id') inside the CHAT.JSX file

49.Now when we refresh the site message disappears now to fix this
will run a useEffect and check if any of the message/chat is selected or not if yes then use AXIOS and fetch the data/chats from mongoDB, ALSO we have to declare the endpoint in the index.js for this 

50. Then we did auto-reconnection

51. 49th point is getting done here

52. online indicator and showing offline indicator

52. And to offline person we need to check DB in the file Chat.jsx we use the useEffect to check if they are on app or not and this runs everytime the showOnlinePeople () runs.

52. int './people'we get all the people below and here will filter out the online people




















































































































